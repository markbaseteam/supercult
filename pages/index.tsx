import {
  CollectionIcon,
  DocumentTextIcon,
  SearchIcon,
} from "@heroicons/react/solid";
import fs from "fs";
import matter from "gray-matter";
import { NextSeo } from "next-seo";
import Head from "next/head";
import { useRouter } from "next/router";
import path from "path";
import recursive from "recursive-readdir";
import styles from "../assets/styles/Home.module.css";
import { environment } from "../utils/environment";
const removeMd = require("remove-markdown");

const Home = (props: { documentList: any[] }) => {
  const router = useRouter();
  const goToPage = (pageUrl: string) => {
    router.push("/" + pageUrl);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>{environment.NEXT_PUBLIC_PROJECT_NAME}</title>
        <meta
          name="description"
          content={
            environment.NEXT_PUBLIC_PROJECT_NAME + " generated by Markbase"
          }
        />
        <link rel="icon" href="/favicon-512x512.png" />
      </Head>

      <main className={styles.main}>
        <div className="mb-4">
          <div style={{ wordBreak: "break-word" }} className="max-w-7xl">
            {props && props.documentList.length > 0 ? (
              <div className="py-4 md:py-16">
                <NextSeo
                  title={"Index - " + environment.NEXT_PUBLIC_PROJECT_NAME}
                />
                <h2 className="text-gray-900 dark:text-gray-200 text-xl font-bold truncate items-center flex flex-row">
                  <CollectionIcon className="h-5 w-5 inline" />
                  <span className="ml-2">Index</span>
                </h2>
                <hr className="invisible sm:visible w-full border border-neutral-200 dark:border-neutral-600 my-4" />
                <ul className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
                  {props.documentList.map((result, i) => (
                    <li
                      onClick={() => goToPage(result.url)}
                      key={i}
                      className="col-span-1 bg-white hover:bg-gray-50 dark:hover:bg-zinc-800 rounded-lg shadow divide-y divide-gray-200 cursor-pointer text-gray-700 dark:bg-neutral-800 dark:text-gray-400"
                    >
                      <div className="w-full flex items-center justify-between p-6 space-x-6">
                        <div className="flex-1 truncate">
                          <div className="flex items-center space-x-3">
                            <h3 className="text-gray-900 dark:text-gray-200 text-md font-medium truncate flex flex-row items-center">
                              <DocumentTextIcon className="h-5 w-5" />
                              <span className="ml-1">
                                {
                                  props.documentList.filter(
                                    (d) => d.url === result.url
                                  )[0].name
                                }
                              </span>
                            </h3>
                          </div>
                          <p className="mt-1 text-gray-500 dark:text-gray-400 text-sm truncate">
                            {removeMd(
                              props.documentList.filter(
                                (d) => d.url === result.url
                              )[0].content
                            ).substring(0, 50) + "..."}
                          </p>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <div className="py-4 md:py-16">
                <NextSeo
                  title={"Index - " + environment.NEXT_PUBLIC_PROJECT_NAME}
                />
                <h2 className="text-gray-900 dark:text-gray-200 text-xl font-bold truncate items-center flex flex-row">
                  <CollectionIcon className="h-5 w-5 inline" />
                  <span className="ml-2">Index</span>
                </h2>
                <hr className="w-full border border-neutral-200 dark:border-neutral-600 my-4" />
                <p>No posts could be found.</p>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

export async function getServerSideProps() {
  // Get home files from first level of the content dir
  let homeFiles = fs.readdirSync(path.join("content"));

  const setHomePage = homeFiles.filter((filename) => {
    if (filename.includes(".md")) {
      const resolvedPath = "content/" + filename;

      try {
        const mdFile = fs.readFileSync(path.resolve(resolvedPath), "utf-8");
        const md = matter(mdFile, {});

        return md.data.hasOwnProperty("home") && md.data.home;
      } catch (error) {
        return false;
      }
    }
  });

  if (setHomePage.length > 0) {
    const resolvedPath =
      "/" + encodeURIComponent(setHomePage[0].replace(".md", ""));

    return {
      redirect: {
        destination: resolvedPath,
        permanent: true,
      },
    };
  } else {
    // Get random page from first directory in content
    const randomHomePage = homeFiles.filter((filename) => {
      if (filename.includes(".md")) {
        return true;
      }
      return false;
    });

    if (randomHomePage.length > 0) {
      const resolvedPath =
        "/" + encodeURIComponent(randomHomePage[0].replace(".md", ""));

      return {
        redirect: {
          destination: resolvedPath,
          permanent: true,
        },
      };
    } else {
      // If none, send to index
      const files = await recursive(path.resolve("content"));
      const documentList = [];
      for (const file of files) {
        if (file.endsWith(".md")) {
          let postPath = file.split(path.resolve(""))[1];
          let fileName = file.replace(/\\/g, "/").split("/")[
            file.replace(/\\/g, "/").split("/").length - 1
          ];

          postPath = postPath
            .replace(/\\/g, "/")
            .split("/")
            .map((p) => encodeURIComponent(p))
            .join("/");

          postPath = postPath.replace(/.md/g, "").replace("content/", "");

          if (postPath.startsWith("/") || postPath.startsWith("\\")) {
            postPath = postPath.substring(1);
          }

          let content = fs.readFileSync(path.resolve(file), "utf-8");

          try {
            let matterContent = matter(content, {});

            documentList.push({
              name: fileName.replace(".md", ""),
              url: postPath,
              content: matterContent.content,
            });
          } catch (error) {
            console.error("Error in getInitialProps - ", error);
            documentList.push({
              name: fileName.replace(".md", ""),
              url: postPath,
              content: content,
            });
          }
        }
      }

      // Return a list of all items
      return {
        props: {
          documentList,
        },
      };
    }
  }
}

export default Home;
